/**
 * @param {number[][]} matrix
 * @return {number[][]}
 */
// it has bug
// var updateMatrix = function(matrix) {
//   const n = matrix.length;
//   const m = matrix[0].length;
//   const ret = new Array(n).fill(null).map(_ => new Array(m).fill(-1));

//   const explore = (x, y, seen) => {
//     if (x < 0 || x >= n || y < 0 || y >= m) return Infinity;
//     if (seen.has(`${x},${y}`)) return Infinity;
//     if (ret[x][y] >= 0) return ret[x][y];
//     if (matrix[x][y] === 0) {
//       ret[x][y] = 0;
//       return 0;
//     }
//     seen.add(`${x},${y}`);
//     let min =
//       Math.min(
//         explore(x + 1, y, seen),
//         explore(x - 1, y, seen),
//         explore(x, y + 1, seen),
//         explore(x, y - 1, seen)
//       ) + 1;
//     // console.log(x, y, min);
//     seen.delete(`${x},${y}`);
//     ret[x][y] = min;
//     return min;
//   };

//   for (let i = 0; i < n; i++) {
//     for (let j = 0; j < m; j++) {
//       // console.log('explore', i, j, ret[i][j]);
//       ret[i][j] = -1;
//       explore(i, j, new Set());
//     }
//   }

//   return ret;
// };

// 6480 ms
// so slow
// DFS function call is too expensive
var updateMatrix = function(matrix) {
  const n = matrix.length;
  const m = matrix[0].length;
  const ret = new Array(n).fill(null).map(_ => new Array(m).fill(n + m));

  const explore = (x, y, current) => {
    if (x < 0 || x >= n || y < 0 || y >= m) return;

    if (ret[x][y] > current) {
      ret[x][y] = current;
      explore(x + 1, y, current + 1);
      explore(x - 1, y, current + 1);
      explore(x, y + 1, current + 1);
      explore(x, y - 1, current + 1);
    }
  };

  for (let i = 0; i < n; i++) {
    for (let j = 0; j < m; j++) {
      if (matrix[i][j] === 0) {
        explore(i, j, 0);
      }
    }
  }

  return ret;
};

// queue
// BFS
// 328 ms
var updateMatrix = function(matrix) {
  const n = matrix.length;
  const m = matrix[0].length;
  const ret = new Array(n).fill(null).map(_ => new Array(m).fill(n + m));
  const queue = [];

  for (let i = 0; i < n; i++) {
    for (let j = 0; j < m; j++) {
      if (matrix[i][j] === 0) {
        queue.push([i, j, 0]);
      }
    }
  }

  while (queue.length) {
    const [x, y, count] = queue.shift();
    if (x < 0 || x >= n || y < 0 || y >= m) continue;
    if (ret[x][y] > count) {
      ret[x][y] = count;
      queue.push([x + 1, y, count + 1]);
      queue.push([x - 1, y, count + 1]);
      queue.push([x, y + 1, count + 1]);
      queue.push([x, y - 1, count + 1]);
    }
  }

  return ret;
};

// the best sol from web
// 172ms
/**
var updateMatrix = function(matrix) {
  const n = matrix.length;
  const m = matrix[0].length;
  const dist = new Array(n).fill(null).map(_ => new Array(m).fill(n + m));

  for (var i = 0; i < n; i++) {
    for (var j = 0; j < m; j++) {
      if (matrix[i][j] === 0) {
        dist[i][j] = 0;
      } else {
        if (i > 0) dist[i][j] = Math.min(dist[i][j], dist[i - 1][j] + 1);
        if (j > 0) dist[i][j] = Math.min(dist[i][j], dist[i][j - 1] + 1);
      }
    }
  }

  for (var i = n - 1; i >= 0; i--) {
    for (var j = m - 1; j >= 0; j--) {
      if (i < n - 1) dist[i][j] = Math.min(dist[i][j], dist[i + 1][j] + 1);
      if (j < m - 1) dist[i][j] = Math.min(dist[i][j], dist[i][j + 1] + 1);
    }
  }

  return dist;
};
 */

console.log(updateMatrix([[0, 0, 0], [0, 1, 0], [0, 0, 0]]));
// [[0, 0, 0], [0, 1, 0], [0, 0, 0]]

console.log(updateMatrix([[0, 0, 0], [0, 1, 0], [1, 1, 1]]));
// [[0, 0, 0], [0, 1, 0], [1, 2, 1]]

console.log(updateMatrix([[1, 1, 1], [1, 1, 1], [1, 1, 0]]));
// [ [ 4, 3, 2 ], [ 3, 2, 1 ], [ 2, 1, 0 ] ]

console.log(
  updateMatrix([
    [1, 1, 0, 0, 1, 0, 0, 1, 1, 0],
    [1, 0, 0, 1, 0, 1, 1, 1, 1, 1],
    [1, 1, 1, 0, 0, 1, 1, 1, 1, 0],
    [0, 1, 1, 1, 0, 1, 1, 1, 1, 1],
    [0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
    [1, 1, 1, 1, 1, 1, 0, 1, 1, 1]
  ])
);

console.log(
  updateMatrix([
    [1, 1, 0, 0, 1, 0, 0, 1, 1, 0],
    [1, 0, 0, 1, 0, 1, 1, 1, 1, 1],
    [1, 1, 1, 0, 0, 1, 1, 1, 1, 0],
    [0, 1, 1, 1, 0, 1, 1, 1, 1, 1],
    [0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
    [1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
    [0, 1, 1, 1, 1, 1, 1, 0, 0, 1],
    [1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
    [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
    [1, 1, 1, 0, 1, 0, 1, 1, 1, 1]
  ])
);
// [
//   [2, 1, 0, 0, 1, 0, 0, 1, 1, 0],
//   [1, 0, 0, 1, 0, 1, 1, 2, 2, 1],
//   [1, 1, 1, 0, 0, 1, 3, 2, 1, 0],
//   [0, 1, 2, 1, 0, 1, 2, 3, 2, 1],
//   [0, 0, 1, 2, 1, 2, 1, 2, 1, 0],
//   [1, 1, 2, 3, 2, 1, 0, 1, 1, 1],
//   [0, 1, 2, 3, 2, 1, 1, 0, 0, 1],
//   [1, 2, 1, 2, 1, 0, 0, 1, 1, 2],
//   [0, 1, 0, 1, 1, 0, 1, 2, 2, 3],
//   [1, 2, 1, 0, 1, 0, 1, 2, 3, 4]
// ]

// prettier-ignore
console.log(
  updateMatrix([
    [1, 0, 1, 1, 0, 0, 1, 0, 0, 1],
    [0, 1, 1, 0, 1, 0, 1, 0, 1, 1],
    [0, 0, 1, 0, 1, 0, 0, 1, 0, 0],
    [1, 0, 1, 0, 1, 1, 1, 1, 1, 1],
    [0, 1, 0, 1, 1, 0, 0, 0, 0, 1],
    [0, 0, 1, 0, 1, 1, 1, 0, 1, 0],
    [0, 1, 0, 1, 0, 1, 0, 0, 1, 1],
    [1, 0, 0, 0, 1, 1, 1, 1, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 0, 1, 0],
    [1, 1, 1, 1, 0, 1, 0, 0, 1, 1]
  ])
);

// prettier-ignore
console.log(
  updateMatrix(
    [[0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1]]
  )
);
